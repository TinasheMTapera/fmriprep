#! /bin/bash
#
# Flywheel 2017
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
FMRIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/fmriprep_output
WORKING_DIR=$GEAR_OUTPUT_DIR/work

CONTAINER='[flywheel/fmriprep]'


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


###############################################################################
# Parse config options from CONFIG file or MANIFEST

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
else
  CONFIG_FILE=$MANIFEST_FILE
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi

# Boolean parsing of freesurfer config option
if [[ $config_freesurfer == 'true' ]]; then
  FREESURFER_FLAG=''
else
  FREESURFER_FLAG='--no-freesurfer'
fi


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY
#   Use Python SDK to accomplish this task
/usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/create_archive.py
BIDS_DIR=$(find $INPUT_DIR/* -maxdepth 0 -type d)

################################################################################
# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

################################################################################
# RUN FMRIPREP

time /usr/local/miniconda/bin/fmriprep $INPUT_DIR $FMRIPREP_OUTPUT_DIR participant -w $WORKING_DIR $FREESURFER_FLAG
FMRIPREP_EXITSTATUS=$?

################################################################################
# CLEANUP OUTPUTS

if [[ $FMRIPREP_EXITSTATUS == 0 ]] ; then
  # Copy reports to top level of output directory
  cp -a "$FMRIPREP_OUTPUT_DIR"/fmriprep/*.html $GEAR_OUTPUT_DIR

  # Generate zipped output of fmriprep
  cd "$FMRIPREP_OUTPUT_DIR"
  zip -r "$GEAR_OUTPUT_DIR"/fmriprep_output_$(basename "$BIDS_DIR") *

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    cd "$WORKING_DIR"
    zip -r "$GEAR_OUTPUT_DIR"/fmriprep_output_work_$(basename "$BIDS_DIR") *
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR
  echo -e "Wrote: `ls $GEAR_OUTPUT_DIR`"

elif [[ $config_save_outputs == 'true' ]] ; then
  # Generate zipped output of fmriprep
  echo "Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  zip -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_output_$(basename "$BIDS_DIR") "$FMRIPREP_OUTPUT_DIR"
  zip -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_output_work_$(basename "$BIDS_DIR") "$WORKING_DIR"
  chmod -R 777 $GEAR_OUTPUT_DIR
  echo -e "Wrote: `ls $GEAR_OUTPUT_DIR`"

else
  echo "$CONTAINER Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$FMRIPREP_OUTPUT_DIR"

exit $FMRIPREP_EXITSTATUS
