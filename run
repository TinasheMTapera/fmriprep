#! /bin/bash
#
# Flywheel 2017
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
INPUT_DIR=$FLYWHEEL_BASE/input/bids_dataset
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
FMRIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/fmriprep_output
WORKING_DIR=$GEAR_OUTPUT_DIR/work
CONTAINER='[flywheel/fmriprep]'


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


###############################################################################
# Parse config options from CONFIG file or MANIFEST

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
else
  CONFIG_FILE=$MANIFEST_FILE
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi

# Boolean parsing of freesurfer config option
if [[ $config_freesurfer == 'true' ]]; then
  FREESURFER_FLAG=''
else
  FREESURFER_FLAG='--no-freesurfer'
fi

################################################################################
# VALIDATE INPUT DATA

# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

# Find input file in input directory with the extension .nii, .nii.gz
input_file=`find $INPUT_DIR -iname '*.zip' -o -iname '*.tgz' -o -iname '*.tar'`

# If input file not found, raise error
if [[ ! -e $input_file ]]; then
    echo "No valid files were found within input directory $INPUT_DIR"
    exit 1
fi


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY

# Unpack the archive
if [[ "$input_file" == *.zip ]] ; then
  echo "$CONTAINER  Unzipping $input_file"
  unzip -q "$input_file" -d "$INPUT_DIR"
elif [[ "$input_file" == *.tar ]] || [[ "$input_file" == *.tgz ]] ; then
  echo "$CONTAINER  Extracting $input_file"
  tar -xf "$input_file" -C $INPUT_DIR
else
  echo "Unsupported filetype ["$input_file"]! Exiting."
  exit 1
fi

BIDS_DIR=$(find $INPUT_DIR/* -maxdepth 0 -type d)


################################################################################
# RUN FMRIPREP

time /usr/local/miniconda/bin/fmriprep $BIDS_DIR $FMRIPREP_OUTPUT_DIR participant -w $WORKING_DIR $FREESURFER_FLAG
FMRIPREP_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS & GENERATE METADATA

if [[ $FMRIPREP_EXITSTATUS == 0 ]] ; then
  # Copy reports to top level of output directory
  cp -a "$FMRIPREP_OUTPUT_DIR"/fmriprep/*.html $GEAR_OUTPUT_DIR

  # Generate zipped output of fmriprep
  cd "$FMRIPREP_OUTPUT_DIR"
  zip -r "$GEAR_OUTPUT_DIR"/fmriprep_output_$(basename "$BIDS_DIR") *
  chmod -R 777 $GEAR_OUTPUT_DIR
  echo -e "Wrote: `ls $GEAR_OUTPUT_DIR`"
else
  echo "$CONTAINER Errors encountered during execution. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$FMRIPREP_OUTPUT_DIR"

exit $FMRIPREP_EXITSTATUS
