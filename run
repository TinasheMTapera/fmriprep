#! /bin/bash
#
# Flywheel 2017
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
FMRIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/fmriprep_output
WORKING_DIR=$GEAR_OUTPUT_DIR/work
LICENSE_FILE=/opt/freesurfer/license.txt

CONTAINER='[flywheel/fmriprep]'


################################################################################
# DISPLAY FMRIPREP DOCKERFILE FOR BUILD INFO

echo "$CONTAINER BEGIN FMRIPREP DOCKERFILE"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo "$CONTAINER END FMRIPREP DOCKERFILE"


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


###############################################################################
# Parse config options from CONFIG file or MANIFEST

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
else
  CONFIG_FILE=$MANIFEST_FILE
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi

# Boolean parsing of freesurfer config option
if [[ $config_freesurfer == 'true' ]]; then
  FREESURFER_FLAG=''
else
  FREESURFER_FLAG='--no-freesurfer'
fi


################################################################################
# Freesurfer License

touch ${LICENSE_FILE}
LICENSE=$(${FLYWHEEL_BASE}/parse_config.py --json_file=${CONFIG_FILE} -l)
echo -e ${LICENSE} > ${LICENSE_FILE}


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY
#   Use Python SDK to accomplish this task
/usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/create_archive.py
BIDS_DIR=$(find $INPUT_DIR/* -maxdepth 0 -type d)


################################################################################
# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

ls -R ${BIDS_DIR}


################################################################################
# RUN FMRIPREP

time /usr/local/miniconda/bin/fmriprep ${BIDS_DIR} ${FMRIPREP_OUTPUT_DIR} participant -w ${WORKING_DIR} ${FREESURFER_FLAG}
FMRIPREP_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS

if [[ $FMRIPREP_EXITSTATUS == 0 ]] ; then

  # Convert index to standalone index
  echo "$CONTAINER  Generating output html report..."
  html_file=`find "$FMRIPREP_OUTPUT_DIR"/fmriprep/ -name "*.html"`
  SUB_ID=$(basename "$html_file" .html)

  if [[ -n "$html_file" ]]; then
    output_html_file="$GEAR_OUTPUT_DIR"/`basename "$html_file"`
    echo "$CONTAINER  writing $output_html_file"
    time python2.7 /opt/webpage2html/webpage2html.py -q -s "$html_file" > "$output_html_file"
  else
    echo "$CONTAINER  no output html report found!"
  fi

  # Generate zipped output of fmriprep
  cd "$FMRIPREP_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/fmriprep_output_"$SUB_ID"_$(basename "$BIDS_DIR") *

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    echo "$CONTAINER  generating zip archive from intermediate work files..."
    cd "$WORKING_DIR"
    time zip -q -r "$GEAR_OUTPUT_DIR"/fmriprep_output_work_"$SUB_ID"_$(basename "$BIDS_DIR") *
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  # Generate zipped output of fmriprep
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_output_$(basename "$BIDS_DIR") "$FMRIPREP_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_output_work_$(basename "$BIDS_DIR") "$WORKING_DIR"
  chmod -R 777 $GEAR_OUTPUT_DIR

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$FMRIPREP_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $FMRIPREP_EXITSTATUS
