#! /bin/bash
#
# Flywheel 2017
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
FMRIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
LICENSE_FILE=/opt/freesurfer/license.txt
FREESURFER_LICENSE_DIR=$INPUT_DIR/freesurfer_license

CONTAINER='[flywheel/fmriprep]'


################################################################################
# DISPLAY FMRIPREP DOCKERFILE FOR BUILD INFO

echo "$CONTAINER BEGIN FMRIPREP DOCKERFILE"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo "$CONTAINER END FMRIPREP DOCKERFILE"


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


##############################################################################
# Parse configuration

function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}

config_freesurfer="$(parse_config 'freesurfer')"
config_save_outputs="$(parse_config 'save_outputs')"
config_save_intermediate_work="$(parse_config 'save_intermediate_work')"
config_intermediate_files="$(parse_config 'intermediate_files')"
config_intermediate_folders="$(parse_config 'intermediate_folders')"

# Boolean parsing of freesurfer config option
if [[ $config_freesurfer == 'true' ]]; then
  FREESURFER_FLAG=''
else
  FREESURFER_FLAG='--no-freesurfer'
fi


################################################################################
# Freesurfer License

# User-Provided license file
if [[ -d "$FREESURFER_LICENSE_DIR" ]]; then
  fs_file=$(find $FREESURFER_LICENSE_DIR/* -type f | head -1)
fi

if [[ -n "$fs_file" ]]; then
  cp "$fs_file" ${LICENSE_FILE}
else
  echo -e "${CONTAINER}  A license file is required to run!"
  exit 1
fi


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY
#   Use Python SDK to accomplish this task
/usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/create_archive.py
BIDS_DIR=$INPUT_DIR/bids_dataset


################################################################################
# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

# Show the contents of the BIDS directory
ls -R ${BIDS_DIR}


################################################################################
# RUN FMRIPREP

time /usr/local/miniconda/bin/fmriprep ${BIDS_DIR} ${FMRIPREP_OUTPUT_DIR} participant -w ${WORKING_DIR} ${FREESURFER_FLAG}
FMRIPREP_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS

if [[ $FMRIPREP_EXITSTATUS == 0 ]] ; then

  # Convert index to standalone zip archive
  html_file=`find "$FMRIPREP_OUTPUT_DIR"/fmriprep/ -name "*.html"`
  SUB_ID=$(basename "$html_file" .html)

  if [[ -n "$html_file" ]]; then
    echo "$CONTAINER  Converting output html report..."
    output_html_file="$GEAR_OUTPUT_DIR"/`basename "$html_file" .html`_"$ANALYSIS_ID".html.zip
    cd `dirname $html_file`
    cp "$SUB_ID".html index.html
    zip -r -q "$output_html_file" \
        index.html \
        "$SUB_ID"/figures \
        "$WORKING_DIR"/reportlets/fmriprep/"$SUB_ID" && \
        rm index.html
    echo "$CONTAINER  HTML report converted."
  else
    echo "$CONTAINER  no output html report found!"
  fi

  # Look for files/folders to preserve from the working DIRECTORY
  work_file_zip="$GEAR_OUTPUT_DIR"/fmriprep_work_selected_"$SUB_ID"_"$ANALYSIS_ID".zip
  if [[ -n "$config_intermediate_files" ]]; then
    echo "$CONTAINER  Archiving selected intermediate files..."
    cd "$WORKING_DIR"
    for f in "$config_intermediate_files"; do
      zip $work_file_zip `find . -type f -name "$f"`
    done
  fi

  if [[ -n "$config_intermediate_folders" ]]; then
    echo "$CONTAINER  Archiving selected intermediate folders..."
    cd "$WORKING_DIR"
    for f in $config_intermediate_folders; do
      zip $work_file_zip `find . -type d -name "$f"`
    done
  fi

  # Generate zipped output of fmriprep
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/fmriprep_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$FMRIPREP_OUTPUT_DIR")

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    echo "$CONTAINER  generating zip archive from intermediate work files..."
    cd "$GEAR_OUTPUT_DIR"
    time zip -q -r "$GEAR_OUTPUT_DIR"/fmriprep_work_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_"$ANALYSIS_ID"  $(basename "$FMRIPREP_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$FMRIPREP_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $FMRIPREP_EXITSTATUS
